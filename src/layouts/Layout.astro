---
import Header from "../components/Header.astro";
// Supports weights 200-800
import "@fontsource-variable/plus-jakarta-sans";
interface Props {
  title: string;
  description: string;
}
const { description, title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/gen-logo-ico.webp" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="bg-white sticky top-0 z-20">
      <Header />
    </div>
    <slot />
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.0/flowbite.min.js"
    ></script>
  </body>
</html>
<style is:global>
  @font-face {
    font-family: "ruberoid-light";
    src: url("/public/fonts/Ruberoid/Ruberoid-Light.otf") format("opentype");
  }

  @font-face {
    font-family: "ruberoid-medium";
    src: url("/public/fonts/Ruberoid/Ruberoid-Medium.otf") format("opentype");
  }

  @font-face {
    font-family: "ruberoid-regular";
    src: url("/public/fonts/Ruberoid/Ruberoid-Regular.otf") format("opentype");
  }

  @font-face {
    font-family: "ruberoid-semibold";
    src: url("/public/fonts/Ruberoid/Ruberoid-SemiBold.otf") format("opentype");
  }

  @font-face {
    font-family: "plusjakartasans-light";
    src: url("/public/fonts/Plus-Jakarta/PlusJakartaSans-Light.ttf")
      format("truetype");
  }

  @font-face {
    font-family: "plusjakartasans-regular";
    src: url("/public/fonts/Plus-Jakarta/PlusJakartaSans-Regular.ttf")
      format("truetype");
  }

  @font-face {
    font-family: "plusjakartasans-semibold";
    src: url("/public/fonts/Plus-Jakarta/PlusJakartaSans-SemiBold.ttf")
      format("truetype");
  }

  body {
    font-family: "Plus Jakarta Sans Variable", sans-serif;
    display: flex;
    flex-direction: column;
    justify-content: center;
    color: #08224b;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const languageBtn = document.getElementById("language-btn");
    const languageBtnMobile = document.getElementById("language-btn-mobile");
    const languageText = languageBtn!.getElementsByTagName("span")[0];
    const languageTextMobile =
      languageBtnMobile!.getElementsByTagName("span")[0];

    languageBtn?.addEventListener("click", () => {
      if (languageText.textContent === "ES") {
        languageText.textContent = "EN";
      } else {
        languageText.textContent = "ES";
      }
      // console.log(languageBtn.textContent!.trim());
      changeLanguage(languageBtn.textContent!.trim());
    });

    languageBtnMobile?.addEventListener("click", () => {
      if (languageTextMobile.textContent === "ES") {
        languageTextMobile.textContent = "EN";
      } else {
        languageTextMobile.textContent = "ES";
      }
      // console.log(languageBtn.textContent!.trim());
      changeLanguage(languageBtnMobile.textContent!.trim());
    });
  });

  const textsToChange = document.querySelectorAll("[data-section]");

  const changeLanguage = async (language: any) => {
    const requestJson = await fetch(`/languages/${language}.json`);
    const texts = await requestJson.json();
    // console.log(texts);

    for (const textToChange of textsToChange) {
      // console.log(textToChange);
      const section = textToChange.getAttribute("data-section");
      const value = textToChange.getAttribute("data-value");

      // console.log(section, value);

      textToChange.innerHTML = texts[section!][value!];
    }
  };
</script>
